name: Ensure Mandatory Code Owners Approve

on:
  pull_request:
    types: [opened, synchronize, reopened]
 
jobs:
  codeowners-approval:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Get Codeowners file content using Bash
      - name: Get Codeowners data using Bash
        id: get-codeowners
        run: |
          OWNER=${{ github.repository_owner }}
          REPO=$(basename ${{ github.repository }})
          FILE_PATH=".github/CODEOWNERS"
          # Make an API call to get the content of the CODEOWNERS file
          RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/$OWNER/$REPO/contents/$FILE_PATH")
          # Extract and decode the base64 content
          CONTENT=$(echo "$RESPONSE" | jq -r '.content' | base64 --decode)
          # Output the content to be used in later steps
          echo "CODEOWNERS content: $CONTENT"
          echo "::set-output name=content::$CONTENT"

      # Step 3: Check approvals from mandatory Code Owners
      - name: Check Approvals from Code Owners
        id: check-approvals
        run: |
          # Extract mandatory users from CODEOWNERS file, removing extra spaces and newlines
          CODEOWNERS=($(echo "${{ steps.get-codeowners.outputs.content }}" | grep -o '@[^ ]*' | sed 's/@//g'))
          # echo "CODEOWNERS line36: $CODEOWNERS"
          # Print all code owners in a single line
            echo "CODEOWNERS list: ${CODEOWNERS[@]}"
          
          # Fetch the list of approved users from the GitHub API
          # APPROVED_USERS=$(curl -s -H "Authorization: token ***" \
          # "https://api.github.com/repos/nitya-v-yadav/ado2github/pulls/11/reviews" \
          # | jq -r '.[] | select(.state == "APPROVED") | .user.login')

          Fetch the list of approved users from the GitHub API
           APPROVED_USERS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
           "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/reviews" \
           | jq -r '.[] | select(.state == "APPROVED") | .user.login' | sort -u)
          # echo "Approved users line40: $APPROVED_USERS"

          # Convert the approved users into an array
            APPROVED_USERS_ARRAY=($(echo "$APPROVED_USERS"))
            
            # Initialize an empty string for ordered approved users
            ORDERED_APPROVED_USERS=""
          
          # Convert the approved users into a space-separated string
          # APPROVED_USERS_LIST=$(echo "$APPROVED_USERS" | tr '\n' ' ')

          # Print approved users in the same format as the CODEOWNERS list
          # echo "Approved users: $APPROVED_USERS_LIST"

          # Debugging: Print CODEOWNERS and approved users list
          # echo "CODEOWNERS list: ${CODEOWNERS[@]}"
          # echo "Approved users: $APPROVED_USERS"

          # Loop over CODEOWNERS and check their approval status in the same order
            for owner in "${CODEOWNERS[@]}"; do
            if echo "${APPROVED_USERS_ARRAY[@]}" | grep -qw "$owner"; then
            ORDERED_APPROVED_USERS+="$owner "
            fi
            done

            # Print approved users in the same order as CODEOWNERS
              echo "Approved users (in CODEOWNERS order): $ORDERED_APPROVED_USERS"
              
          # Initialize approval count for mandatory code owners
          APPROVAL_COUNT=0
          REQUIRED_APPROVALS=${#CODEOWNERS[@]}  # Number of mandatory approvals

          # Loop over code owners to check if they've approved
            for owner in "${CODEOWNERS[@]}"; do
            echo "Checking if $owner has approved..."
            if echo "$ORDERED_APPROVED_USERS" | grep -qw "$owner"; then
            ((APPROVAL_COUNT++))
            echo "$owner has approved."
            else
            echo "$owner has NOT approved."
            fi
            done

            echo "Number of mandatory code owner approvals: $APPROVAL_COUNT"
            echo "Required mandatory approvals: $REQUIRED_APPROVALS"

           # Check if all mandatory code owners have approved
           if [ "$APPROVAL_COUNT" -ne "$REQUIRED_APPROVALS" ]; then
           echo "Not all mandatory code owners have approved. PR cannot be merged yet."
           exit 1  # Fail the job to block the merge
           else
           echo "All mandatory code owners have approved the PR. PR can be merged."
           fi
           

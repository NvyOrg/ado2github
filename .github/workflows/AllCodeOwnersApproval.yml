name: Ensure Mandatory Code Owners Approve

on:
  pull_request:
    types: [opened, synchronize, reopened]
  
jobs:
  codeowners-approval:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Get Codeowners file content from the .github folder
      - name: Get Codeowners data
        id: get-codeowners
        uses: actions/github-script@v6
        with:
          script: |
            const response = await github.rest.repos.getContent({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: '.github/CODEOWNERS',  # Ensure CODEOWNERS is in this path
            });
            const content = Buffer.from(response.data.content, 'base64').toString('utf8');
            return { content };

      # Step 3: Check approvals from Code Owners
      - name: Check Approvals from Code Owners
        id: check-approvals
        run: |
          # Parse CODEOWNERS file and extract mandatory users (handles '@' symbol correctly)
          CODEOWNERS=($(echo "${{ steps.get-codeowners.outputs.content }}" | grep -o '@[^ ]*' | sed 's/@//g'))

          # Debug: Print code owners
          echo "Codeowners list:"
          for owner in "${CODEOWNERS[@]}"; do
            echo "$owner"
          done

          # Fetch the list of approved users from the GitHub API
          APPROVED_USERS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/reviews" \
          | jq -r '.[] | select(.state == "APPROVED") | .user.login')

          # Debug: Print approved users
          echo "Approved users:"
          echo "$APPROVED_USERS"

          # Normalize CODEOWNERS (convert to lowercase and trim spaces)
          CODEOWNERS=$(echo "${CODEOWNERS[@]}" | tr ' ' '\n' | tr '[:upper:]' '[:lower:]' | xargs)

          # Normalize APPROVED_USERS (convert to lowercase and trim spaces)
          APPROVED_USERS=$(echo "$APPROVED_USERS" | tr '[:upper:]' '[:lower:]' | xargs)

          # Initialize approval count
          APPROVAL_COUNT=0
          REQUIRED_APPROVALS=$(echo "$CODEOWNERS" | wc -l)  # Count the number of mandatory code owners

          # Loop over code owners to check if they approved
          while IFS= read -r owner; do
            owner=$(echo "$owner" | xargs)  # Trim spaces around the owner name
            if echo "$APPROVED_USERS" | grep -qw "$owner"; then
              ((APPROVAL_COUNT++))
            else
              echo "$owner has NOT approved."
            fi
          done <<< "$CODEOWNERS"

          echo "Number of mandatory code owner approvals: $APPROVAL_COUNT"
          echo "Required mandatory approvals: $REQUIRED_APPROVALS"

          # Check if all mandatory code owners have approved
          if [ "$APPROVAL_COUNT" -ne "$REQUIRED_APPROVALS" ]; then
            echo "Not all mandatory code owners have approved. PR cannot be merged yet."
            exit 1  # Fail the job to block the merge
          else
            echo "All mandatory code owners have approved the PR. PR can be merged."
          fi

      # Step 4: Optional approvals check (if needed)
      - name: Optional Approvals Check (optional reviewers)
        if: success()  # Only run this step if code owner approvals passed
        run: |
          echo "Optional reviewers can approve, but this step doesn't block the merge."
      
      # Step 5: Approvals Check Passed
      - name: Approvals Check Passed
        if: success()
        run: echo "PR is ready to merge after all mandatory code owners' approval."

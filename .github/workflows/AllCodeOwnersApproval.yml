name: Ensure Mandatory Code Owners Approve

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  codeowners-approval:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Get Codeowners file content using Bash
      - name: Get Codeowners data using Bash
        id: get-codeowners
        run: |
          OWNER=${{ github.repository_owner }}
          REPO=$(basename ${{ github.repository }})
          FILE_PATH=".github/CODEOWNERS"
          RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/$OWNER/$REPO/contents/$FILE_PATH")
          CONTENT=$(echo "$RESPONSE" | jq -r '.content' | base64 --decode)
          echo "CODEOWNERS content: $CONTENT"
          echo "::set-output name=content::$CONTENT"

      # Step 3: Check approvals from mandatory Code Owners
      - name: Check Approvals from Code Owners
        id: check-approvals
        run: |
          # Extract mandatory users from CODEOWNERS file and trim whitespace
          CODEOWNERS=($(echo "${{ steps.get-codeowners.outputs.content }}" | grep -o '@[^ ]*' | sed 's/@//g' | tr -d '[:space:]'))
          echo "CODEOWNERS list: ${CODEOWNERS[@]}"

          # Fetch the list of approved users from the GitHub API and trim whitespace
          APPROVED_USERS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/reviews" \
          | jq -r '.[] | select(.state == "APPROVED") | .user.login' | sort -u | tr -d '[:space:]')
          echo "Approved users: $APPROVED_USERS"

          # Initialize approval count for mandatory code owners
          APPROVAL_COUNT=0
          REQUIRED_APPROVALS=${#CODEOWNERS[@]}
          echo "Required mandatory approvals: $REQUIRED_APPROVALS"

          # Loop over code owners to check if they've approved
          for owner in "${CODEOWNERS[@]}"; do
            # Remove any leading/trailing whitespace from the owner name
            owner=$(echo "$owner" | xargs)
            echo "Checking approval for code owner: '$owner'"
            # Normalize approved users by trimming spaces/newlines
            NORMALIZED_APPROVED_USERS=$(echo "$APPROVED_USERS" | xargs)
            echo "Normalized approved users: '$NORMALIZED_APPROVED_USERS'"
            # Check if the owner is in the list of approved users
            if echo "$NORMALIZED_APPROVED_USERS" | grep -iwq "$owner"; then
              ((APPROVAL_COUNT++))
              echo "'$owner' has approved."
            else
              echo "'$owner' has NOT approved."
            fi
          done

          echo "Number of mandatory code owner approvals: $APPROVAL_COUNT"

          # Check if all mandatory code owners have approved
          if [ "$APPROVAL_COUNT" -lt "$REQUIRED_APPROVALS" ]; then
            echo "Not all mandatory code owners have approved. PR cannot be merged yet."
            exit 1  # Fail the job to block the merge
          else
            echo "All mandatory code owners have approved the PR. PR can be merged."
          fi

name: Ensure All Code Owners Approve

on:
  pull_request:
    types: [opened, synchronize, reopened]
  schedule:
    - cron: '*/30 * * * *'  # Run every 30 minutes to check for approvals

jobs:
  codeowners-approval:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Get Codeowners file content from the .github folder
      - name: Get Codeowners data
        id: get-codeowners
        uses: actions/github-script@v6
        with:
          script: |
            const response = await github.rest.repos.getContent({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: '.github/CODEOWNERS',  # Ensure CODEOWNERS is in this path
            });
            const content = Buffer.from(response.data.content, 'base64').toString('utf8');
            return { content };

      # Step 3: Parse Codeowners and ensure all members approve the PR
      - name: Check Approvals from Code Owners
        id: check-approvals
        run: |
          # Parse CODEOWNERS file and extract users (handles '@' symbol correctly)
          CODEOWNERS=($(echo "${{ steps.get-codeowners.outputs.content }}" | grep -o '@[^ ]*' | sed 's/@//g'))

          # Fetch approved users from the GitHub API
          APPROVED_USERS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/reviews" \
          | jq -r '.[] | select(.state == "APPROVED") | .user.login')

          echo "Approved users: $APPROVED_USERS"

          # Initialize approval count and required approvals count
          APPROVAL_COUNT=0
          REQUIRED_APPROVALS=${#CODEOWNERS[@]}

          # Compare approved users with code owners and count matches
          for owner in "${CODEOWNERS[@]}"; do
            if echo "$APPROVED_USERS" | grep -qw "$owner"; then
              ((APPROVAL_COUNT++))
            fi
          done

          echo "Number of code owner approvals: $APPROVAL_COUNT"
          echo "Required approvals: $REQUIRED_APPROVALS"

          # Fail the job if not all code owners have approved
          if [ "$APPROVAL_COUNT" -ne "$REQUIRED_APPROVALS" ]; then
            echo "Not all code owners have approved. PR cannot be merged yet."
            exit 1  # Fail the job to block merge
          else
            echo "All code owners have approved the PR. PR can be merged."
          fi

      # Step 4: Approvals Check Passed
      - name: Approvals Check Passed
        if: success()
        run: echo "PR is ready to merge after all code owners' approval."

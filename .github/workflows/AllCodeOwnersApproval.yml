name: Ensure Mandatory Code Owners Approve

on:
  pull_request:
    types: [opened, synchronize, reopened]
  # schedule:
  #   - cron: '*/30 * * * *'  # Run every 30 minutes to check for approvals

jobs:
  codeowners-approval:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Get Codeowners file content using Bash
      - name: Get Codeowners data using Bash
        id: get-codeowners
        run: |
          OWNER=${{ github.repository_owner }}
          REPO=$(basename ${{ github.repository }})
          FILE_PATH=".github/CODEOWNERS"
          
          # Make an API call to get the content of the CODEOWNERS file
          RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/$OWNER/$REPO/contents/$FILE_PATH")
            
          # Extract and decode the base64 content
          CONTENT=$(echo "$RESPONSE" | jq -r '.content' | base64 --decode)
          
          # Output the content to be used in later steps
          echo "CODEOWNERS content: $CONTENT"
          # echo "{name}={content}" >> $$CONTENT
          echo "::set-output name=content::$CONTENT"
          
      # Step 3: Check approvals from mandatory Code Owners
      - name: Check Approvals from Code Owners
        id: check-approvals
        run: |
          # Extract mandatory users from CODEOWNERS file, removing extra spaces and newlines
          CODEOWNERS=($(echo "${{ steps.get-codeowners.outputs.content }}" | grep -o '@[^ ]*' | sed 's/@//g' | tr -d '[:space:]'))
          # Debugging: Print CODEOWNERS list
          echo "CODEOWNERS list: ${CODEOWNERS[@]}"
          # Fetch the list of approved users from the GitHub API
          APPROVED_USERS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/reviews" \
          | jq -r '.[] | select(.state == "APPROVED") | .user.login' | sort -u)
          # Debugging: Print raw APPROVED_USERS
          echo "Approved users: $APPROVED_USERS"
          # Initialize approval count for mandatory code owners
          APPROVAL_COUNT=0
          REQUIRED_APPROVALS=${#CODEOWNERS[@]}  # Number of mandatory approvals
          # Debugging: Print required approvals
          echo "Required mandatory approvals: $REQUIRED_APPROVALS"
          # Loop over code owners to check if they've approved
          # for owner in "${CODEOWNERS[@]}"; do
          #   owner=$(echo "$owner" | tr -d '[:space:]')  # Trim any spaces
          #   echo "Checking approval for: $owner"
          #   if echo "$APPROVED_USERS" | grep -iwq "$owner"; then  # Case-insensitive comparison
          #     ((APPROVAL_COUNT++))
          #     echo "$owner has approved"
          #   else
          #     echo "$owner has NOT approved"
          #   fi
          # done
          # echo "Number of mandatory code owner approvals: $APPROVAL_COUNT"
          # # Check if all mandatory code owners have approved
          # if [ "$APPROVAL_COUNT" -ne "$REQUIRED_APPROVALS" ]; then
          #   echo "Not all mandatory code owners have approved. PR cannot be merged yet."
          #   exit 1  # Fail the job to block the merge
          # else
          #   echo "All mandatory code owners have approved the PR. PR can be merged."
          # fi
          # Loop over code owners to check if they've approved
          for owner in "${CODEOWNERS[@]}"; do
          owner=$(echo "$owner" | tr -d '[:space:]')  # Trim any spaces/newlines from the owner name
          echo "Checking approval for code owner: $owner"
  
          # Normalize approved users by trimming spaces/newlines
          NORMALIZED_APPROVED_USERS=$(echo "$APPROVED_USERS" | tr -d '[:space:]')
          echo "Normalized approved users: $NORMALIZED_APPROVED_USERS"
  
          # Check if the owner is in the list of approved users
          if echo "$NORMALIZED_APPROVED_USERS" | grep -wq "$owner"; then
             ((APPROVAL_COUNT++))
          echo "'$owner' has approved."
          else
          echo "'$owner' has NOT approved."
          fi
          done

          # After looping through all owners, set the output with the approval count
          echo "approval_count=$APPROVAL_COUNT" >> $GITHUB_OUTPUT

          # Also set whether all required approvals were met
          if [ "$APPROVAL_COUNT" -lt "$REQUIRED_APPROVALS" ]; then
          echo "all_approved=false" >> $GITHUB_OUTPUT
          echo "Not all mandatory code owners have approved. PR cannot be merged yet."
          exit 1  # Fail the job to block the merge
          else
          echo "all_approved=true" >> $GITHUB_OUTPUT
          echo "All mandatory code owners have approved the PR. PR can be merged."
          fi
      
      # Step 4: Optional Approvals Check (if needed)
      - name: Optional Approvals Check (optional reviewers)
        if: success()  # Only run this step if code owner approvals passed
        run: |
          echo "Optional reviewers can approve, but this step doesn't block the merge."
      # Step 5: Approvals Check Passed
      - name: Approvals Check Passed
        if: success()
        run: echo "PR is ready to merge after all mandatory code owners' approval."

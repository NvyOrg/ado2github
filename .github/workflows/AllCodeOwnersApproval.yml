name: Ensure Mandatory Code Owners Approve

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  codeowners-approval:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Get Codeowners file content using Bash
      - name: Get Codeowners data using Bash
        id: get-codeowners
        run: |
          OWNER=${{ github.repository_owner }}
          REPO=$(basename ${{ github.repository }})
          FILE_PATH=".github/CODEOWNERS"
          # Make an API call to get the content of the CODEOWNERS file
          RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/$OWNER/$REPO/contents/$FILE_PATH")
          CONTENT=$(echo "$RESPONSE" | jq -r '.content' | base64 --decode)
          echo "::set-output name=content::$CONTENT"

      # Step 3: Fetch approvals and check against CODEOWNERS
      - name: Check Approvals from Code Owners
        id: check-approvals
        run: |
          # Extract mandatory users from CODEOWNERS file, removing extra spaces and newlines
          CODEOWNERS=($(echo "${{ steps.get-codeowners.outputs.content }}" | grep -o '@[^ ]*' | sed 's/@//g'))
          echo "CODEOWNERS list: ${CODEOWNERS[@]}"

          # Fetch the list of approved users from the GitHub API only once
          APPROVED_USERS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/reviews" \
          | jq -r '.[] | select(.state == "APPROVED") | .user.login')

          # Convert approved users into an array
          APPROVED_USERS_ARRAY=($(echo "$APPROVED_USERS" | tr '\n' ' '))

          # Print approved users
          echo "Approved users: ${APPROVED_USERS_ARRAY[@]}"

          # Initialize approval count
          APPROVAL_COUNT=0
          REQUIRED_APPROVALS=${#CODEOWNERS[@]}  # Number of mandatory approvals

          # Use associative array to store approvals for O(1) lookup
          declare -A approved_map
          for approved_user in "${APPROVED_USERS_ARRAY[@]}"; do
            approved_map["$approved_user"]=1
          done

          # Check if each code owner has approved
          for owner in "${CODEOWNERS[@]}"; do
            echo "Checking if $owner has approved..."
            if [[ ${approved_map[$owner]} ]]; then
              ((APPROVAL_COUNT++))  # Increment approval count
              echo "$owner has approved. Approval count: $APPROVAL_COUNT"
            else
              echo "$owner has NOT approved."
            fi
          done

          # Check if all mandatory code owners have approved
          if [ "$APPROVAL_COUNT" -lt "$REQUIRED_APPROVALS" ]; then
            echo "Not all mandatory code owners have approved. PR cannot be merged yet."
            exit 1  # Fail the job to block the merge
          else
            echo "All mandatory code owners have approved the PR. PR can be merged."
          fi
